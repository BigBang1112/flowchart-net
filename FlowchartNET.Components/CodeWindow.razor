@using FlowchartNET.Components.CodeGenerators
@inject AppState AppState
@inject EventBroadcastService EventBroadcast
@inject IJSRuntime JS

@if (AppState.IsCodeGenerationOpen)
{
    <div class="container">
        <div class="window">
            <div class="languages">
                @foreach (var lang in Enum.GetValues<Language>())
                {
                    <button class="button-noborder lang @(AppState.Persistent.Language == lang ? "active" : "")" @onclick="async () => await SetLanguageAsync(lang)">
                        @GetUserFriendlyLanguageName(lang)
                    </button>
                }
                <button class="button-fill close" @onclick="Close">Close</button>
            </div>
            <div class="code">
                <StandaloneCodeEditor @ref="editor" ConstructionOptions="EditorConstructionOptions" />
            </div>
        </div>
    </div>
}

@code {
    private StandaloneCodeEditor? editor;

    protected override void OnInitialized()
    {
        EventBroadcast.CodeWindowUpdate += StateHasChanged;
    }

    private CodeGenerator GetCodeGenerator(Language lang) => lang switch
    {
        Language.CSharp => new CSharpCodeGenerator(),
        Language.Lua => new LuaCodeGenerator(),
        _ => throw new NotImplementedException(),
    };

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        var language = AppState.Persistent.Language;

        return new StandaloneEditorConstructionOptions
        {
            Theme = "vs-dark",
            ReadOnly = true,
            AutomaticLayout = true,
            FontSize = 20,
            Language = language.ToString().ToLowerInvariant(),
            Value = GenerateCode(GetCodeGenerator(language))
        };
    }

    private string GetUserFriendlyLanguageName(Language lang) => lang switch
    {
        Language.CSharp => "C#",
        _ => lang.ToString(),
    };

    private async ValueTask SetLanguageAsync(Language lang)
    {
        AppState.Persistent.Language = lang;

        if (editor is null)
        {
            return;
        }

        await BlazorMonaco.Editor.Global.SetModelLanguage(JS, await editor.GetModel(), lang.ToString().ToLowerInvariant());

        var codeGenerator = GetCodeGenerator(lang);
        editor?.SetValue(GenerateCode(codeGenerator));

        await AppState.PersistAsync();
    }

    private string? GenerateCode(CodeGenerator codeGenerator)
    {
        var firstStartSymbol = AppState.Persistent
            .Symbols
            .OfType<StartSymbolData>()
            .FirstOrDefault();

        if (firstStartSymbol is null)
        {
            return null;
        }

        return codeGenerator.Generate(firstStartSymbol);
    }

    private void Close()
    {
        AppState.IsCodeGenerationOpen = false;
    }
}