@using FlowchartNET.Components.Events
@implements IDraggable

<div class="symbol symbol-decision" style="position: absolute; left: @(Data.X)px; top: @(Data.Y)px; width: @(Data.Width)px; height: @(Data.Height)px" @onkeydown="OnKeyDown">
    <div @ref="shape" class="shape symbol-hoverable @(Selected ? "selected" : "") @(Simulated ? "simulated" : "")" style="width: calc(@(Data.Height)px * sin(45deg) + 2px); height: calc(@(Data.Height)px * sin(45deg) + 2px); transform: scaleX(@Data.ScaleX) rotate(45deg); cursor: @(IsDragging ? "grabbing" : "grab");"
    @onmousedown="MouseDownAsync"
    @onmousedown:preventDefault="true"
    @onmousedown:stopPropagation="true"
    @ontouchstart="TouchStartAsync"
    @ontouchstart:preventDefault="true"></div>
    <span>@Data.GetLabel()</span>
    <span class="yes" style="right: -2rem;top: calc(50% - 1.5rem);">Yes</span>
    <span class="no" style="bottom: -1.5rem;left: calc(50% - 2rem);">No</span>
    <div class="connect connect-top connect-top-decision" 
         @onclick="() => OnPointClickAsync(socketTop, connectFrom: () => false, connectTo: () => true)"
         @onclick:stopPropagation="true"
         @onmousedown:preventDefault="true"></div>
    <div class="connect connect-bottom connect-bottom-decision" 
         @onclick="() => OnPointClickAsync(socketBottom, connectFrom: () => true, connectTo: () => false, conn => Data.FalseSymbols.Add(conn.DestSymbolId))"
         @onclick:stopPropagation="true"
         @onmousedown:preventDefault="true"></div>
    <div class="connect connect-left-decision"
         @onclick="() => OnPointClickAsync(socketLeft, connectFrom: () => true, connectTo: () => false, conn => Data.TrueSymbols.Add(conn.DestSymbolId))"
         @onclick:stopPropagation="true"
         @onmousedown:preventDefault="true"></div>
    <div class="connect connect-right-decision"
         @onclick="() => OnPointClickAsync(socketRight, connectFrom: () => true, connectTo: () => false, conn => Data.TrueSymbols.Add(conn.DestSymbolId))"
         @onclick:stopPropagation="true"
         @onmousedown:preventDefault="true"></div>
</div>

@code {
    private ElementReference shape;

    private static string socketTop = "top";
    private static string socketBottom = "bottom";
    private static string socketLeft = "left";
    private static string socketRight = "right";

    public bool IsDragging { get; set; }

    [Parameter, EditorRequired]
    public required DecisionSymbolData Data { get; set; }

    Guid IDraggable.Id => Data.Id;
    double IDraggable.X { get => Data.X; set => Data.X = value; }
    double IDraggable.Y { get => Data.Y; set => Data.Y = value; }

    [Parameter]
    public EventCallback<SymbolDragEventArgs> OnMouseDown { get; set; }

    [Parameter]
    public EventCallback<PointClickEventArgs> OnPointClick { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    [Parameter]
    public bool Selected { get; set; }

    [Parameter]
    public bool Simulated { get; set; }

    private async Task MouseDownAsync(MouseEventArgs e)
    {
        IsDragging = true;
        await OnMouseDown.InvokeAsync(new SymbolDragEventArgs(this, e.ClientX, e.ClientY));
    }

    private async Task TouchStartAsync(TouchEventArgs e)
    {
        if (e.Touches.Length == 0)
        {
            return;
        }

        IsDragging = true;
        await OnMouseDown.InvokeAsync(new SymbolDragEventArgs(this, e.Touches[0].ClientX, e.Touches[0].ClientY));
    }

    private async Task OnPointClickAsync(string socket, Func<bool> connectFrom, Func<bool> connectTo, Action<LineConnection>? connection = null)
    {
        await OnPointClick.InvokeAsync(new PointClickEventArgs(this, shape, socket, connectFrom, connectTo, connection));
    }
}
