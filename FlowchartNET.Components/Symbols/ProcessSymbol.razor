@using FlowchartNET.Components.Events
@implements ISymbol
@inject AppState AppState

<div class="symbol symbol-process" style="position: absolute; left: @(Data.X)px; top: @(Data.Y)px; width: @(Data.Width)px;" @onkeydown="OnKeyDown">
    <div @ref="Shape" class="shape symbol-hoverable @(Selected ? "selected" : "") @(Simulated ? "simulated" : "")" style="cursor: @(IsDragging ? "grabbing" : "grab");"
    @onmousedown="MouseDownAsync"
    @onmousedown:preventDefault="true"
    @onmousedown:stopPropagation="true"
    @ontouchstart="TouchStartAsync"
    @ontouchstart:preventDefault="true"></div>
    <span>@Data.GetLabel()</span>
    <div class="connect connect-top"
    @onclick="() => OnPointClickAsync(socketTop,
        connectFrom: () => Data.IsBottomToTop,
        connectTo: ConnectToTop,
        conn => { Data.NextSymbols.Add(conn.DestSymbolId); Data.IsBottomToTop = true; })"
    @onclick:stopPropagation="true"
    @onmousedown:preventDefault="true"></div>
    <div class="connect connect-bottom"
    @onclick="() => OnPointClickAsync(socketBottom,
        connectFrom: () => !Data.IsBottomToTop,
        connectTo: ConnectToBottom,
        conn => Data.NextSymbols.Add(conn.DestSymbolId))"
    @onclick:stopPropagation="true"
    @onmousedown:preventDefault="true"></div>
</div>

@code {
    private static string socketTop = "top";
    private static string socketBottom = "bottom";

    public ElementReference Shape { get; private set; }

    public bool IsDragging { get; set; }

    [Parameter, EditorRequired]
    public required ProcessSymbolData Data { get; set; }

    Guid ISymbol.Id => Data.Id;
    double ISymbol.X { get => Data.X; set => Data.X = value; }
    double ISymbol.Y { get => Data.Y; set => Data.Y = value; }
    SymbolData ISymbol.Data => Data;
    string? ISymbol.GetSocketIn() => Data.IsBottomToTop ? socketBottom : socketTop;
    string? ISymbol.GetSocketOut(Guid nextSymbolId) => Data.IsBottomToTop ? socketTop : socketBottom;

    [Parameter]
    public EventCallback<SymbolDragEventArgs> OnMouseDown { get; set; }

    [Parameter]
    public EventCallback<PointClickEventArgs> OnPointClick { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    public bool Selected => AppState.Persistent.SelectedSymbolId == Data.Id;
    public bool Simulated => AppState.Simulation?.CurrentSymbolIds.Contains(Data.Id) ?? false;

    private async Task MouseDownAsync(MouseEventArgs e)
    {
        IsDragging = true;
        await OnMouseDown.InvokeAsync(new SymbolDragEventArgs(this, e.ClientX, e.ClientY));
    }

    private async Task TouchStartAsync(TouchEventArgs e)
    {
        if (e.Touches.Length == 0)
        {
            return;
        }

        IsDragging = true;
        await OnMouseDown.InvokeAsync(new SymbolDragEventArgs(this, e.Touches[0].ClientX, e.Touches[0].ClientY));
    }

    private async Task OnPointClickAsync(string socket, Func<bool> connectFrom, Func<bool> connectTo, Action<LineConnection>? connection = null)
    {
        await OnPointClick.InvokeAsync(new PointClickEventArgs(this, Shape, socket, connectFrom, connectTo, connection));
    }

    private bool ConnectToBottom()
    {
        if (Data.NextSymbols.Count == 0)
        {
            Data.IsBottomToTop = true;
        }

        return Data.IsBottomToTop;
    }

    private bool ConnectToTop()
    {
        if (Data.NextSymbols.Count == 0)
        {
            Data.IsBottomToTop = false;
        }

        return !Data.IsBottomToTop;
    }
}
