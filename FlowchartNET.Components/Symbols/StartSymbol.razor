@using FlowchartNET.Components.Events
@implements IDraggable
@inject AppState AppState

@inject AppState AppState

<div class="symbol symbol-terminal" style="position: absolute; left: @(Data.X)px; top: @(Data.Y)px; width: @(Data.Width)px;" @onkeydown="OnKeyDown">
    <div @ref="shape" class="shape symbol-hoverable @(Selected ? "selected" : "") @(Simulated ? "simulated" : "")" style="cursor: @(IsDragging ? "grabbing" : "grab");"
    @onmousedown="MouseDownAsync"
    @onmousedown:preventDefault="true"
    @onmousedown:stopPropagation="true"
    @ontouchstart="TouchStartAsync"
    @ontouchstart:preventDefault="true"></div>
    <span>@Data.GetLabel()</span>
    <div class="connect connect-bottom"
    @onclick="() => OnPointClickAsync(socket, connectFrom: () => true, connectTo: () => false, conn => Data.NextSymbols.Add(conn.DestSymbolId))"
    @onclick:stopPropagation="true"
    @onmousedown:preventDefault="true"></div>
</div>

@code {
    private ElementReference shape;

    private static string socket = "bottom";

    public bool IsDragging { get; set; }

    [Parameter, EditorRequired]
    public required StartSymbolData Data { get; set; }

    Guid IDraggable.Id => Data.Id;
    double IDraggable.X { get => Data.X; set => Data.X = value; }
    double IDraggable.Y { get => Data.Y; set => Data.Y = value; }

    [Parameter]
    public EventCallback<SymbolDragEventArgs> OnMouseDown { get; set; }

    [Parameter]
    public EventCallback<PointClickEventArgs> OnPointClick { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    public bool Selected => AppState.SelectedSymbolId == Data.Id;
    public bool Simulated => AppState.Simulation?.CurrentSymbolIds.Contains(Data.Id) ?? false;

    private async Task MouseDownAsync(MouseEventArgs e)
    {
        IsDragging = true;
        await OnMouseDown.InvokeAsync(new SymbolDragEventArgs(this, e.ClientX, e.ClientY));
    }

    private async Task TouchStartAsync(TouchEventArgs e)
    {
        if (e.Touches.Length == 0)
        {
            return;
        }

        IsDragging = true;
        await OnMouseDown.InvokeAsync(new SymbolDragEventArgs(this, e.Touches[0].ClientX, e.Touches[0].ClientY));
    }

    private async Task OnPointClickAsync(string socket, Func<bool> connectFrom, Func<bool> connectTo, Action<LineConnection> connection)
    {
        await OnPointClick.InvokeAsync(new PointClickEventArgs(this, shape, socket, connectFrom, connectTo, connection));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (AppState.Simulation is null)
        {
            return;
        }

        if (!AppState.Simulation.CurrentSymbolIds.Contains(Data.Id))
        {
            return;
        }

        if (!AppState.Simulation.NextSymbolIds.TryGetValue(Data.Id, out var nextSymbolId))
        {
            return;
        }
    }
}
