@implements IDraggable

<div class="symbol symbol-io" style="position: absolute; left: @(Data.X)px; top: @(Data.Y)px; width: @(Data.Width)px;">
    <div class="shape symbol-hoverable"
         style="width: calc(100% - (@(IOSymbolData.DefaultHeight)px * tan(20deg))); height: @(IOSymbolData.DefaultHeight)px; cursor: @(IsDragging ? "grabbing" : "grab");"
        @onmousedown="MouseDownAsync"
        @onmousedown:preventDefault="true"></div>
    <span>Input / Output</span>
    <div @ref="pointTop" class="connect connect-top connect-top-io" @onclick="() => OnPointClickAsync(pointTop, socketTop)"></div>
    <div @ref="pointBottom" class="connect connect-bottom connect-bottom-io" @onclick="() => OnPointClickAsync(pointBottom, socketBottom)"></div>
</div>

@code {
    private ElementReference pointTop;
    private ElementReference pointBottom;
    private static string socketTop = "top";
    private static string socketBottom = "bottom";

    public bool IsDragging { get; set; }

    [Parameter, EditorRequired]
    public required IOSymbolData Data { get; set; }

    double IDraggable.X { get => Data.X; set => Data.X = value; }
    double IDraggable.Y { get => Data.Y; set => Data.Y = value; }

    [Parameter]
    public EventCallback<SymbolDragEventArgs> OnMouseDown { get; set; }

    [Parameter]
    public EventCallback<(ElementReference, string)> OnPointClick { get; set; }

    private async Task MouseDownAsync(MouseEventArgs e)
    {
        IsDragging = true;
        await OnMouseDown.InvokeAsync(new SymbolDragEventArgs(this, e));
    }

    private async Task OnPointClickAsync(ElementReference element, string socket)
    {
        await OnPointClick.InvokeAsync((element, socket));
    }
}
