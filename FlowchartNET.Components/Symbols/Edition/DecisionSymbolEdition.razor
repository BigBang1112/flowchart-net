@inject AppState AppState
@inject EventBroadcastService EventBroadcast

<div class="property-group">
    <label>Condition:</label>
    <input type="text" value="@Condition" @oninput="e => Condition = e.Value?.ToString()" @onchange="e => SetConditionAsync(e.Value?.ToString())" />
</div>
<div class="property-group">
    <label>Display name:</label>
    <input type="text" value="@DisplayName" @oninput="e => DisplayName = e.Value?.ToString()" @onchange="e => SetDisplayNameAsync(e.Value?.ToString())" />
</div>
<div class="property-group">
    <span>When true:</span>

    @if (Data.TrueSymbols.Count == 0)
    {
        <span>None</span>
    }
    else
    {
        @foreach (var nextSymbol in Data.TrueSymbols)
        {
            <button class="button-tech" style="font-size: 60%;" @onclick="() => SwitchToSymbol(nextSymbol)">@nextSymbol</button>
        }
    }
</div>
<div class="property-group">
    <span>When false:</span>
    @if (Data.FalseSymbols.Count == 0)
    {
        <span>None</span>
    }
    else
    {
        @foreach (var nextSymbol in Data.FalseSymbols)
        {
            <button class="button-tech" style="font-size: 60%;" @onclick="() => SwitchToSymbol(nextSymbol)">@nextSymbol</button>
        }
    }
</div>
<div class="property-group">
    <span>Details:</span>
    <table class="details">
        <tr>
            <td>Position X:</td>
            <td>@Data.X</td>
        </tr>
        <tr>
            <td>Position Y:</td>
            <td>@Data.Y</td>
        </tr>
        <tr>
            <td>Width:</td>
            <td>@Data.Width</td>
        </tr>
        <tr>
            <td>Height:</td>
            <td>@Data.Height</td>
        </tr>
        <tr>
            <td>Scale X:</td>
            <td>@Data.ScaleX</td>
        </tr>
        <tr>
            <td>Created at:</td>
            <td>@Data.CreatedAt.DateTime</td>
        </tr>
    </table>
</div>
<button class="button-fill" @onclick="() => OnDelete.InvokeAsync(Data)">Delete</button>

@code {
    [Parameter, EditorRequired]
    public required DecisionSymbolData Data { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<SymbolData> OnDelete { get; set; }

    private string? Condition
    {
        get => Data.Condition;
        set
        {
            Data.Condition = value == string.Empty ? null : value;
            EventBroadcast.UpdateProperties();
            EventBroadcast.UpdateWorkspace();
        }
    }

    private string? DisplayName
    {
        get => Data.DisplayName;
        set
        {
            Data.DisplayName = value == string.Empty ? null : value;
            EventBroadcast.UpdateProperties();
            EventBroadcast.UpdateWorkspace();
        }
    }

    private async Task SetConditionAsync(string? value)
    {
        Condition = value;
        await AppState.PersistAsync();
    }

    private async Task SetDisplayNameAsync(string? value)
    {
        DisplayName = value;
        await AppState.PersistAsync();
    }

    private void SwitchToSymbol(Guid symbolId)
    {
        AppState.SelectedSymbolId = symbolId;
        EventBroadcast.UpdateProperties();
        EventBroadcast.UpdateWorkspace();
    }
}
