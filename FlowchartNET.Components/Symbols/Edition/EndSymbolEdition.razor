@inject AppState AppState
@inject EventBroadcastService EventBroadcast

<div class="property-group">
    <label>Display name:</label>
    <input type="text" value="@DisplayName" @oninput="e => DisplayName = e.Value?.ToString()" @onchange="e => SetDisplayNameAsync(e.Value?.ToString())" placeholder="End" />
</div>
<div class="property-group">
    <span>Details:</span>
    <table class="details">
        <tr>
            <td>Position X:</td>
            <td>@Data.X</td>
        </tr>
        <tr>
            <td>Position Y:</td>
            <td>@Data.Y</td>
        </tr>
        <tr>
            <td>Width:</td>
            <td>@Data.Width</td>
        </tr>
        <tr>
            <td>Created at:</td>
            <td>@Data.CreatedAt.DateTime</td>
        </tr>
    </table>
</div>
<button class="button-fill" @onclick="() => OnDelete.InvokeAsync(Data)">Delete</button>

@code {
    [Parameter, EditorRequired]
    public required EndSymbolData Data { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<SymbolData> OnDelete { get; set; }

    private string? DisplayName
    {
        get => Data.DisplayName;
        set
        {
            Data.DisplayName = value == string.Empty ? null : value;
            EventBroadcast.UpdateProperties();
            EventBroadcast.UpdateWorkspace();
        }
    }

    private async Task SetDisplayNameAsync(string? value)
    {
        DisplayName = value;
        await AppState.PersistAsync();
    }
}
