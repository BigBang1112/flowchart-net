@implements IAsyncDisposable
@inject ModuleHelper ModuleHelper

<div class="toolbar">
    <ToolbarItem ImageUrl="add_circle.svg" ImageAlt="Add" />
    <ToolbarItem ImageUrl="folder_open.svg" ImageAlt="Open" />
    <ToolbarItem ImageUrl="download.svg" ImageAlt="Save" />
    <ToolbarItem ImageUrl="print.svg" ImageAlt="Print" />
    <ToolbarDivider />
    <ToolbarItem ImageUrl="file_export.svg" ImageAlt="Export">
        <span class="screen-wide">Export as...</span>
    </ToolbarItem>
    <ToolbarDivider />
    <ToolbarItem ImageUrl="frame_source.svg" ImageAlt="Generate code">
        <span class="screen-wide">Generate code</span>
    </ToolbarItem>
    <ToolbarDivider />
    <ToolbarItem ImageUrl="sdk.svg" ImageAlt="Mode">
        <span class="screen-medium">Mode: <b>Logical</b></span>
    </ToolbarItem>
    <ToolbarItem ImageUrl="light_mode.svg" ImageAlt="Light Mode" AdditionalCssClass="align-right" OnClick="ToggleThemeAsync" />
</div>
<ToolbarItem ImageUrl="menu.svg" ImageAlt="Menu" AdditionalCssClass="burger align-right" />

@code {
    private IJSObjectReference? module;

    private bool toggleTheme;

    private async Task ToggleThemeAsync()
    {
        if (module is null)
        {
            return;
        }

        toggleTheme = !toggleTheme;

        await module.InvokeVoidAsync("toggleTheme", toggleTheme);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await ModuleHelper.ImportAsync(nameof(Toolbar));
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}