@using FlowchartNET.Components.Events
@using FlowchartNET.Components.State
@implements IAsyncDisposable

@inject ModuleHelper ModuleHelper
@inject AppState AppState
@inject EventBroadcastService EventBroadcast

<main style="zoom: @((AppState.Persistent.Zoom * 100).ToString(System.Globalization.CultureInfo.InvariantCulture))%"
@ondragover="OnDragOver"
@onclick="OnClickAsync"
@ondragover:preventDefault="true" 
@onmousemove="OnMouseMoveAsync"
@onmousedown="OnMouseDownAsync"
@onmouseup="OnMouseUpAsync"
@ontouchmove="OnTouchMoveAsync"
@ontouchmove:preventDefault="true"
@ontouchcancel="OnMouseUpAsync"
@onscroll="OnScrollAsync">

    @if (simulationTask?.Exception is not null)
    {
        <p>@simulationTask.Exception</p>
    }

    @foreach (var symbol in AppState.Persistent.Symbols)
    {
        <DynamicComponent Type="symbol.ComponentType" Parameters="GetSymbolComponentParameters(symbol)" @ref="symbolComponents[symbol.Id]" />
    }

</main>

@code {
    private IJSObjectReference? module;

    private DotNetObjectReference<Workspace>? objRef;

    private ISymbol? currentlyDraggedSymbol;
    private double currentlyDraggedSymbolOffsetX;
    private double currentlyDraggedSymbolOffsetY;

    private PointClickEventArgs? currentConnectorEvent;
    private Dictionary<(Guid FromSymbolId, Guid ToSymbolId), IJSObjectReference> lines = [];

    private List<IJSObjectReference> simulationLines = [];
    private CancellationTokenSource simulationCts = new();
    private Task? simulationTask;

    private Dictionary<Guid, DynamicComponent> symbolComponents = new();

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
        EventBroadcast.WorkspaceUpdate += () => StateHasChanged();
        EventBroadcast.SymbolDelete += async (symbol) => await DeleteSymbolAsync(symbol);
        EventBroadcast.SimulationStart += StartSimulation;
        EventBroadcast.FlowchartNew += async () => await ClearLinesAsync();
        EventBroadcast.FlowchartLoad += async () =>
        {
            await ClearLinesAsync();
            await ConnectSymbolsFromStateAsync();
        };
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await ModuleHelper.ImportAsync(nameof(Workspace), nameof(WorkspaceModule));
            await module.InvokeVoidAsync("addHandlers", objRef);

            await ConnectSymbolsFromStateAsync();
        }
    }

    private void OnDragOver(DragEventArgs e)
    {
        // prevent default behavior
    }

    private async Task OnClickAsync(MouseEventArgs e)
    {
        if (module is null)
        {
            return;
        }

        if (AppState.Persistent.MenuSelectedSymbolId is not null)
        {
            var mouseX = WorkspaceModule.GetMouseX(e.ClientX);
            var mouseY = WorkspaceModule.GetMouseY(e.ClientY);

            await AddSymbolAsync(AppState.Persistent.MenuSelectedSymbolId, mouseX, mouseY);
        }

        if (currentConnectorEvent is not null)
        {
            await module.InvokeVoidAsync("removeCurrentLine");
            currentConnectorEvent = null;
        }
    }

    [JSInvokable]
    public async Task AddSymbolAsync(string symbolId, double x, double y)
    {
        x /= AppState.Persistent.Zoom;
        y /= AppState.Persistent.Zoom;

        var addedSymbols = new List<SymbolData>();

        switch (symbolId)
        {
            case "symbol-terminal":
                addedSymbols.Add(new StartSymbolData
                    {
                        X = Math.Max(0, x - EndSymbolData.DefaultWidth / 2),
                        Y = y - EndSymbolData.DefaultHeight / 2
                    });
                addedSymbols.Add(new EndSymbolData
                    {
                        X = Math.Max(0, x - EndSymbolData.DefaultWidth / 2),
                        Y = y - EndSymbolData.DefaultHeight / 2 + 100
                    });
                break;
            case "symbol-process":
                addedSymbols.Add(new ProcessSymbolData
                    {
                        X = Math.Max(0, x - ProcessSymbolData.DefaultWidth / 2),
                        Y = y - ProcessSymbolData.DefaultHeight / 2
                    });
                break;
            case "symbol-io":
                addedSymbols.Add(new IOSymbolData
                    {
                        X = Math.Max(0, x - IOSymbolData.DefaultWidth / 2),
                        Y = y - IOSymbolData.DefaultHeight / 2
                    });
                break;
            case "symbol-decision":
                addedSymbols.Add(new DecisionSymbolData
                    {
                        X = Math.Max(0, x - DecisionSymbolData.DefaultHeight * DecisionSymbolData.DefaultScaleX / 2),
                        Y = y - DecisionSymbolData.DefaultHeight / 2
                    });
                break;
        }

        AppState.Persistent.Symbols.AddRange(addedSymbols);
        AppState.Persistent.MenuSelectedSymbolId = null;
        AppState.Persistent.SelectedSymbolId = addedSymbols.FirstOrDefault()?.Id;
        AppState.Persistent.IsPropertiesOpen = true;

        EventBroadcast.UpdateMenu();
        EventBroadcast.UpdateProperties();
        StateHasChanged(); // probably not needed?

        await AppState.PersistAsync();
    }

    private Dictionary<string, object> GetSymbolComponentParameters(SymbolData data) =>
        new Dictionary<string, object>
        {
            { "Data", data },
            { "OnMouseDown", EventCallback.Factory.Create<SymbolDragEventArgs>(this, OnSymbolMouseDownAsync) },
            { "OnPointClick", EventCallback.Factory.Create<PointClickEventArgs>(this, OnSymbolPointClickAsync) },
            { "OnKeyDown", EventCallback.Factory.Create<KeyboardEventArgs>(this, OnKeyDown) },
        };

    private async Task OnSymbolMouseDownAsync(SymbolDragEventArgs e)
    {
        currentlyDraggedSymbolOffsetX = (e.Draggable.X - WorkspaceModule.GetMouseX(e.ClientX) / AppState.Persistent.Zoom) * AppState.Persistent.Zoom;
        currentlyDraggedSymbolOffsetY = (e.Draggable.Y - WorkspaceModule.GetMouseY(e.ClientY) / AppState.Persistent.Zoom) * AppState.Persistent.Zoom;
        currentlyDraggedSymbol = e.Draggable;
        AppState.Persistent.SelectedSymbolId = e.Draggable.Id;

        EventBroadcast.UpdateProperties();
        await AppState.PersistAsync();
    }

    private async Task OnMouseMoveAsync(MouseEventArgs e)
    {
        await SymbolMoveAsync(e.ClientX, e.ClientY);
    }

    private async Task OnTouchMoveAsync(TouchEventArgs e)
    {
        if (e.Touches.Length == 0)
        {
            return;
        }

        await SymbolMoveAsync(e.Touches[0].ClientX, e.Touches[0].ClientY);
    }

    private async Task SymbolMoveAsync(double clientX, double clientY)
    {
        if (currentlyDraggedSymbol is not null)
        {
            currentlyDraggedSymbol.X = Math.Max(0, WorkspaceModule.GetMouseX(clientX) + currentlyDraggedSymbolOffsetX) / AppState.Persistent.Zoom;
            currentlyDraggedSymbol.Y = Math.Max(0, WorkspaceModule.GetMouseY(clientY) + currentlyDraggedSymbolOffsetY) / AppState.Persistent.Zoom;

            await UpdateLinePositionsAsync();
        }
    }

    private async Task OnMouseDownAsync()
    {
        AppState.Persistent.SelectedSymbolId = null;
        AppState.Persistent.IsPropertiesOpen = false;
        EventBroadcast.UpdateProperties();
        await AppState.PersistAsync();
    }

    private async Task OnMouseUpAsync()
    {
        if (currentlyDraggedSymbol is not null)
        {
            currentlyDraggedSymbol.IsDragging = false;
            currentlyDraggedSymbol = null;

            AppState.Persistent.IsPropertiesOpen = true;
            EventBroadcast.UpdateProperties();

            await UpdateLinePositionsAsync();

            await AppState.PersistAsync();
        }
    }

    private async Task OnScrollAsync()
    {
        await UpdateLinePositionsAsync();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Delete")
        {
            await DeleteSelectedSymbolAsync();
        }
    }

    private async Task DeleteSelectedSymbolAsync()
    {
        await DeleteSymbolAsync(AppState.Persistent.SelectedSymbolId);
    }

    private async Task DeleteSymbolAsync(Guid? symbolId)
    {
        var symbol = AppState.Persistent.Symbols.FirstOrDefault(x => x.Id == symbolId);

        if (symbol is null)
        {
            return;
        }

        await DeleteSymbolAsync(symbol);
    }

    private async Task DeleteSymbolAsync(SymbolData symbol)
    {
        foreach (var connectedSymbolId in symbol.GetConnectedSymbolIds())
        {
            var line = lines[(symbol.Id, connectedSymbolId)];
            await line.InvokeVoidAsync("remove");
            symbol.RemoveConnection(connectedSymbolId);
            lines.Remove((symbol.Id, connectedSymbolId));
        }

        var otherConnectedSymbols = AppState.Persistent.Symbols.Where(x => x.GetConnectedSymbolIds().Contains(symbol.Id));

        foreach (var connectedSymbol in otherConnectedSymbols)
        {
            var line = lines[(connectedSymbol.Id, symbol.Id)];
            await line.InvokeVoidAsync("remove");
            connectedSymbol.RemoveConnection(symbol.Id);
            lines.Remove((connectedSymbol.Id, symbol.Id));
        }

        AppState.Persistent.Symbols.Remove(symbol);

        if (AppState.Persistent.SelectedSymbolId == symbol.Id)
        {
            AppState.Persistent.SelectedSymbolId = null;
            AppState.Persistent.IsPropertiesOpen = false;
            EventBroadcast.UpdateProperties();
        }

        StateHasChanged(); // necessary due to external calls
        await AppState.PersistAsync();
    }

    private async Task OnSymbolPointClickAsync(PointClickEventArgs e)
    {
        if (module is null)
        {
            return;
        }

        if (currentConnectorEvent is null)
        {
            if (e.ConnectFrom.Invoke())
            {
                currentConnectorEvent = e;
                await module.InvokeVoidAsync("startLine", e.Element, e.Socket, AppState.Persistent.Zoom);
            }
            else // delete otherwise
            {
                // Gets all symbols that are connected to the clicked symbol
                var allConnected = AppState.Persistent.Symbols.Where(x => x.GetConnectedSymbolIds().Contains(e.Symbol.Id)).ToList();

                if (allConnected.Count == 0)
                {
                    // Action when nothing connects to the point
                    return;
                }

                // removing is "survivable", but it would be better to first loop through the lines, select only one of them, and delete after confirming selection
                foreach (var connectedSymbol in allConnected)
                {
                    var line = lines[(connectedSymbol.Id, e.Symbol.Id)];
                    await line.InvokeVoidAsync("remove");
                    connectedSymbol.RemoveConnection(e.Symbol.Id);
                    lines.Remove((connectedSymbol.Id, e.Symbol.Id));
                }
            }

            return;
        }

        if (currentConnectorEvent.Symbol.Id == e.Symbol.Id)
        {
            currentConnectorEvent = null;
            await module.InvokeVoidAsync("removeCurrentLine");
            return;
        }

        // if the same symbol connection already exists, do not create a new one
        // makes sense even for Decision, cannot reasonably connect from two branches to the same symbol
        if (lines.ContainsKey((currentConnectorEvent.Symbol.Id, e.Symbol.Id)))
        {
            return;
        }

        if (!e.ConnectTo.Invoke())
        {
            return;
        }

        currentConnectorEvent.Connection?.Invoke(new LineConnection(e.Symbol.Id, e.Socket));

        var completedLine = await module.InvokeAsync<IJSObjectReference>("endLine", e.Element, e.Socket);

        lines.Add((currentConnectorEvent.Symbol.Id, e.Symbol.Id), completedLine);

        currentConnectorEvent = null;

        await AppState.PersistAsync();
    }

    private async ValueTask UpdateLinePositionsAsync()
    {
        if (module is null)
        {
            return;
        }

        foreach (var line in lines.Values.Concat(simulationLines))
        {
            try
            {
                if (line is not null)
                {
                    await module.InvokeVoidAsync("updateLine", line);
                }
            }
            catch
            {
                // Dont update position in case of bad line update timing
            }
        }
    }

    private void StartSimulation(StartSymbolData startSymbol)
    {
        simulationCts.Cancel();
        simulationCts.Dispose();
        simulationCts = new CancellationTokenSource();

        var simulation = new State.SimulationState();
        simulation.CurrentSymbolIds = [startSymbol.Id];
        simulation.UsedSymbolIds = [startSymbol.Id];
        AppState.Simulation = simulation;

        StateHasChanged();

        simulationTask = Task.Run(async () =>
        {
            try
            {
                await SimulateAsync(simulation);
            }
            catch (OperationCanceledException)
            {
                // ignore
            }
            finally
            {
                AppState.Simulation = null;
                simulationCts.Dispose();
                simulationCts = new CancellationTokenSource();
                await InvokeAsync(StateHasChanged);
            }
        }, simulationCts.Token);
    }

    private async Task SimulateAsync(SimulationState simulation)
    {
        while (true)
        {
            var nextSymbolIds = new Dictionary<Guid, HashSet<Guid>>();

            foreach (var currentSymbolId in simulation.CurrentSymbolIds)
            {
                var currentSymbol = AppState.Persistent.Symbols.FirstOrDefault(x => x.Id == currentSymbolId);

                if (currentSymbol is null)
                {
                    throw new InvalidOperationException("Current symbol not found");
                }

                if (currentSymbol is EndSymbolData)
                {
                    simulation.IsFinished = true;
                    break;
                }

                simulationCts.Token.ThrowIfCancellationRequested();

                var nextSymbolIdsOfCurrentSymbol = currentSymbol.Simulate(simulation);

                foreach (var nextSymbolId in nextSymbolIdsOfCurrentSymbol)
                {
                    var line = lines[(currentSymbolId, nextSymbolId)];

                    if (module is not null)
                    {
                        var simulationLine = await module.InvokeAsync<IJSObjectReference>("simulateLine", line, simulation.StepTime.TotalMilliseconds);
                        simulationLines.Add(simulationLine);
                    }
                }

                nextSymbolIds.Add(currentSymbolId, nextSymbolIdsOfCurrentSymbol);
            }

            simulation.NextSymbolIds = nextSymbolIds;
            await InvokeAsync(StateHasChanged);

            if (nextSymbolIds.Count == 0)
            {
                break;
            }

            await Task.Delay(simulation.StepTime, simulationCts.Token);

            simulation.CurrentSymbolIds = nextSymbolIds.Values.SelectMany(x => x).ToHashSet();

            foreach (var nextSymbolId in simulation.CurrentSymbolIds)
            {
                simulation.UsedSymbolIds.Add(nextSymbolId);
            }

            await InvokeAsync(StateHasChanged);
            await Task.Delay(simulation.IdleTime, simulationCts.Token);

            foreach (var simulationLine in simulationLines)
            {
                await simulationLine.InvokeVoidAsync("remove");
            }

            simulationLines.Clear();
        }
    }

    private async ValueTask ConnectSymbolsFromStateAsync()
    {
        foreach (var symbol in AppState.Persistent.Symbols)
        {
            var symbolComponent = (ISymbol?)symbolComponents.GetValueOrDefault(symbol.Id)?.Instance;

            if (symbolComponent is null)
            {
                continue;
            }

            foreach (var connectedSymbolId in symbol.GetConnectedSymbolIds())
            {
                var connectedSymbol = (ISymbol?)symbolComponents.GetValueOrDefault(connectedSymbolId)?.Instance;

                if (connectedSymbol is null || module is null)
                {
                    continue;
                }

                var line = await module.InvokeAsync<IJSObjectReference>("createFullLine",
                    symbolComponent.Shape,
                    connectedSymbol.Shape,
                    symbolComponent.GetSocketOut(connectedSymbolId),
                    connectedSymbol.GetSocketIn(),
                    AppState.Persistent.Zoom);

                lines.Add((symbol.Id, connectedSymbolId), line);
            }
        }
    }

    private async Task ClearLinesAsync()
    {
        foreach (var line in lines.Values)
        {
            await line.InvokeVoidAsync("remove");
        }

        lines.Clear();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}
